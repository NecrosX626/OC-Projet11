{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { url } from \"../index\";\n\n//LOGIN FETCH\n\nconst loginForm = document.querySelector(\"#loginForm\");\nconst usernameInput = document.querySelector(\"#username\");\nconst passwordInput = document.querySelector(\"#password\");\nconst rememberMeInput = document.querySelector(\"#remember-me\");\nfunction loginRequest() {\n  const postMethod = {\n    method: \"POST\",\n    headers: {\n      \"accept\": \"application/json\",\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    },\n    body: JSON.stringify({\n      email: usernameInput.value,\n      password: passwordInput.value\n    })\n  };\n  fetch(url + \"users/login\", postMethod).then(response => {\n    if (response.status !== 200) {\n      throw new Error(response.status);\n    } else {\n      return response.json();\n    }\n  }).then(json => {\n    localStorage.setItem(\"token\", json.token);\n    // window.location.href = \"\";\n  });\n}\n\nconst loginTest = () => {\n  console.log(\"email : \", usernameInput.value);\n  console.log(\"email : \", usernameInput.value);\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    token: null\n  },\n  reducers: {\n    login: (state, action) => {\n      const {\n        user,\n        accesToken\n      } = action.payload;\n      state.user = user;\n      state.user = accesToken;\n    },\n    logout: state => {\n      state.user = null;\n      state.token = null;\n    }\n  }\n});\nexport const {\n  login,\n  logout\n} = authSlice.actions;\nexport const authReducer = authSlice.reducer;\nexport const selectUser = state => state.auth.user;\nexport const selectToken = state => state.auth.accesToken;","map":{"version":3,"names":["createSlice","url","loginForm","document","querySelector","usernameInput","passwordInput","rememberMeInput","loginRequest","postMethod","method","headers","body","JSON","stringify","email","value","password","fetch","then","response","status","Error","json","localStorage","setItem","token","loginTest","console","log","authSlice","name","initialState","user","reducers","login","state","action","accesToken","payload","logout","actions","authReducer","reducer","selectUser","auth","selectToken"],"sources":["F:/Visual Studio/Projects/OpenClassrooms/Projet 11 bkp/argent-bank/src/features/authSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { url } from \"../index\"\r\n\r\n//LOGIN FETCH\r\n\r\nconst loginForm = document.querySelector(\"#loginForm\")\r\nconst usernameInput = document.querySelector(\"#username\")\r\nconst passwordInput = document.querySelector(\"#password\")\r\nconst rememberMeInput = document.querySelector(\"#remember-me\")\r\n\r\nfunction loginRequest() {\r\n    const postMethod = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"accept\" : \"application/json\",\r\n        \"Content-type\" : \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: usernameInput.value,\r\n        password: passwordInput.value,\r\n      }),\r\n    };\r\n    fetch(url + \"users/login\", postMethod)\r\n      .then((response) => {\r\n        if (response.status !== 200){\r\n          throw new Error(response.status)\r\n        }\r\n        else{\r\n          return response.json()\r\n        }\r\n      })\r\n      .then((json) => {\r\n        localStorage.setItem(\"token\", json.token);\r\n        // window.location.href = \"\";\r\n      })\r\n}\r\n\r\nconst loginTest = () => {\r\n    console.log(\"email : \", usernameInput.value)\r\n    console.log(\"email : \", usernameInput.value)\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        user: null,\r\n        token: null\r\n    },\r\n    reducers: {\r\n        login: (state, action) => {\r\n            const {user, accesToken} = action.payload\r\n            state.user = user\r\n            state.user = accesToken\r\n        },\r\n        logout: (state) => {\r\n            state.user = null\r\n            state.token = null\r\n        }\r\n    }\r\n})\r\n\r\nexport const {login, logout} = authSlice.actions\r\nexport const authReducer = authSlice.reducer\r\n\r\nexport const selectUser = (state) => state.auth.user\r\nexport const selectToken = (state) => state.auth.accesToken\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,GAAG,QAAQ,UAAU;;AAE9B;;AAEA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;AACtD,MAAMC,aAAa,GAAGF,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;AACzD,MAAME,aAAa,GAAGH,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;AACzD,MAAMG,eAAe,GAAGJ,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC;AAE9D,SAASI,YAAYA,CAAA,EAAG;EACpB,MAAMC,UAAU,GAAG;IACjBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAG,kBAAkB;MAC7B,cAAc,EAAG;IACnB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAEV,aAAa,CAACW,KAAK;MAC1BC,QAAQ,EAAEX,aAAa,CAACU;IAC1B,CAAC;EACH,CAAC;EACDE,KAAK,CAACjB,GAAG,GAAG,aAAa,EAAEQ,UAAU,CAAC,CACnCU,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;MAC1B,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACC,MAAM,CAAC;IAClC,CAAC,MACG;MACF,OAAOD,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB;EACF,CAAC,CAAC,CACDJ,IAAI,CAAEI,IAAI,IAAK;IACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;IACzC;EACF,CAAC,CAAC;AACR;;AAEA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAExB,aAAa,CAACW,KAAK,CAAC;EAC5CY,OAAO,CAACC,GAAG,CAAC,UAAU,EAAExB,aAAa,CAACW,KAAK,CAAC;AAChD,CAAC;AAED,MAAMc,SAAS,GAAG9B,WAAW,CAAC;EAC1B+B,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,IAAI,EAAE,IAAI;IACVP,KAAK,EAAE;EACX,CAAC;EACDQ,QAAQ,EAAE;IACNC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACtB,MAAM;QAACJ,IAAI;QAAEK;MAAU,CAAC,GAAGD,MAAM,CAACE,OAAO;MACzCH,KAAK,CAACH,IAAI,GAAGA,IAAI;MACjBG,KAAK,CAACH,IAAI,GAAGK,UAAU;IAC3B,CAAC;IACDE,MAAM,EAAGJ,KAAK,IAAK;MACfA,KAAK,CAACH,IAAI,GAAG,IAAI;MACjBG,KAAK,CAACV,KAAK,GAAG,IAAI;IACtB;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAACS,KAAK;EAAEK;AAAM,CAAC,GAAGV,SAAS,CAACW,OAAO;AAChD,OAAO,MAAMC,WAAW,GAAGZ,SAAS,CAACa,OAAO;AAE5C,OAAO,MAAMC,UAAU,GAAIR,KAAK,IAAKA,KAAK,CAACS,IAAI,CAACZ,IAAI;AACpD,OAAO,MAAMa,WAAW,GAAIV,KAAK,IAAKA,KAAK,CAACS,IAAI,CAACP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}